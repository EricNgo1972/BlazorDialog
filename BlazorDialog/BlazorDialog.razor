@typeparam TInput
@inject DialogStates states
@inject BlazorDialogService dialogService

@if (Id != null && states.IsShowing.ContainsKey(Id) && states.IsShowing[Id])
{
    if (!IsCustom)
    {
        <div class="blazor-dialog-container @(Centered ? "blazor-dialog-centered" : "")">
            <div class="blazor-dialog-content-wrapper @ContentWrapperCssClass">
                <div class="blazor-dialog-content">
                    @ChildContent(new DialogContext<TInput>(this.Id, dialogService, (TInput)states.Inputs[Id]))
                </div>
            </div>
        </div>
    }
    else
    {
        @ChildContent(new DialogContext<TInput>(this.Id, dialogService, (TInput)states.Inputs[Id]))
    }
}

@code{
    [Parameter] protected string Id { get; set; }
    [Parameter] protected RenderFragment<DialogContext<TInput>> ChildContent { get; set; }
    [Parameter] protected DialogSizes Size { get; set; } = DialogSizes.Normal;
    [Parameter] protected bool Centered { get; set; } = false;
    [Parameter] protected bool IsCustom { get; set; }

    protected override void OnInit()
    {
        if (Id == null) throw new ArgumentNullException(nameof(Id));
        states.OnDialogStateChange += StateHasChanged;
    }

    private string ContentWrapperCssClass
    {
        get
        {
            switch (Size)
            {
                case DialogSizes.Normal:
                    return "";
                case DialogSizes.Small:
                    return "blazor-dialog-content-wrapper-small";
                case DialogSizes.Large:
                    return "blazor-dialog-content-wrapper-large";
                default:
                    throw new Exception("Unknown dialog size");
            }
        }
    }
}